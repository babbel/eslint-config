{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "jsx": "preserve",

    // ASTRO BASE TSCONFIG
    // Enable top-level await, and other modern ESM features.
    "target": "ESNext",
    "module": "ESNext",
    // Enable node-style module resolution, for things like npm package imports.
    "moduleResolution": "node",
    // Enable JSON imports.
    "resolveJsonModule": true,
    // Enable stricter transpilation for better output.
    "isolatedModules": true,
    // Astro directly run TypeScript code, no transpilation needed.
    "noEmit": true,
    // Report an error when importing a file using a casing different from the casing on disk.
    "forceConsistentCasingInFileNames": true,
    // Properly support importing CJS modules in ESM
    "esModuleInterop": true,
    // Skip typechecking libraries and .d.ts files
    // "skipLibCheck": true,
    // Add alias for assets folder for easy reference to assets
    "baseUrl": ".",
    // "paths": {
    //   "~/assets/*": ["src/assets/*"]
    // },
    // TypeScript 5.0 changed how `isolatedModules` and `importsNotUsedAsValues` works, deprecating the later
    // Until the majority of users are on TypeScript 5.0, we'll have to supress those deprecation errors
    // "ignoreDeprecations": "5.0",
    // Allow JavaScript files to be imported
    // "allowJs": true,

    // ASTRO STRICT TSCONFIG
    "strict": true,
    // Error when a value import is only used as a type.
    // "importsNotUsedAsValues": "error",

    // ASTRO STRICTEST TSCONFIG
    // Report errors for fallthrough cases in switch statements
    "noFallthroughCasesInSwitch": true,
    // Force functions designed to override their parent class to be specified as `override`.
    "noImplicitOverride": true,
    // Force functions to specify that they can return `undefined` if a possible code path does not return a value.
    "noImplicitReturns": true,
    // Report an error when a variable is declared but never used.
    "noUnusedLocals": true,
    // Report an error when a parameter is declared but never used.
    "noUnusedParameters": true,
    // Force the usage of the indexed syntax to access fields declared using an index signature.
    "noUncheckedIndexedAccess": true,
    // Report an error when the value `undefined` is given to an optional property that doesn't specify `undefined` as a valid value.
    "exactOptionalPropertyTypes": true,
    // Report an error for unreachable code instead of just a warning.
    "allowUnreachableCode": false,
    // Report an error for unused labels instead of just a warning.
    "allowUnusedLabels": false,
    // Disallow JavaScript files from being imported
    "allowJs": false
  },
  "include": ["./**/*"]
}
